/* Auto-generated by genmsg_cpp for file /home/ros/owr_software/rover/src/owr_messages/msg/board.msg */
#ifndef OWR_MESSAGES_MESSAGE_BOARD_H
#define OWR_MESSAGES_MESSAGE_BOARD_H
#include "ros_echronos/ros.hpp"
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "owr_messages/pwm.h"
#include "std_msgs/Header.h"

namespace owr_messages
{
template <class ContainerAllocator>
struct board_ {
  typedef board_<ContainerAllocator> Type;

  board_()
  : joints()
  , header()
  {
  }

  board_(const ContainerAllocator& _alloc)
  : joints(_alloc)
  , header(_alloc)
  {
  }

  typedef ros_echronos::Array< ::owr_messages::pwm_>  _joints_type;
  ros_echronos::Array< ::owr_messages::pwm_>  joints;

  typedef  ::std_msgs::Header_ _header_type;
   ::std_msgs::Header_ header;


  typedef boost::shared_ptr< ::owr_messages::board_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::owr_messages::board_<ContainerAllocator>  const> ConstPtr;
}; // struct board
typedef  ::owr_messages::board_<std::allocator<void> > board;

typedef boost::shared_ptr< ::owr_messages::board> boardPtr;
typedef boost::shared_ptr< ::owr_messages::board const> boardConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::owr_messages::board_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::owr_messages::board_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace owr_messages

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::owr_messages::board_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::owr_messages::board_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::owr_messages::board_<ContainerAllocator> > {
  static const char* value() 
  {
    return "453c3571d6f3ec2fc66ab02af3dbb171";
  }

  static const char* value(const  ::owr_messages::board_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x453c3571d6f3ec2fULL;
  static const uint64_t static_value2 = 0xc66ab02af3dbb171ULL;
};

template<class ContainerAllocator>
struct DataType< ::owr_messages::board_<ContainerAllocator> > {
  static const char* value() 
  {
    return "owr_messages/board";
  }

  static const char* value(const  ::owr_messages::board_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::owr_messages::board_<ContainerAllocator> > {
  static const char* value() 
  {
    return "pwm[] joints\n\
Header header\n\
================================================================================\n\
MSG: owr_messages/pwm\n\
string joint\n\
int32 pwm\n\
float64 targetVel\n\
float64 currentVel\n\
float64 currentPos\n\
float64 targetPos\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
";
  }

  static const char* value(const  ::owr_messages::board_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::owr_messages::board_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.joints);
    stream.next(m.header);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER
}; // struct board_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::owr_messages::board_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::owr_messages::board_<ContainerAllocator> & v) 
  {
    s << indent << "joints[]" << std::endl;
    for (size_t i = 0; i < v.joints.size(); ++i)
    {
      s << indent << "  joints[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::owr_messages::pwm_>::stream(s, indent + "    ", v.joints[i]);
    }
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_>::stream(s, indent + "  ", v.header);
  }
};


} // namespace message_operations
} // namespace ros

#endif // OWR_MESSAGES_MESSAGE_BOARD_H

